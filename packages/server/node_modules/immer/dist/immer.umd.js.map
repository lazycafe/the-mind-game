{"version":3,"file":"immer.umd.js","sources":["../src/common.js","../src/scope.js","../src/es5.js","../src/proxy.js","../src/patches.js","../src/immer.js","../src/index.js"],"sourcesContent":["export const NOTHING =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-nothing\")\n        : {[\"immer-nothing\"]: true}\n\nexport const DRAFTABLE =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-draftable\")\n        : \"__$immer_draftable\"\n\nexport const DRAFT_STATE =\n    typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\"\n\nexport function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE]\n}\n\nexport function isDraftable(value) {\n    if (!value || typeof value !== \"object\") return false\n    if (Array.isArray(value)) return true\n    const proto = Object.getPrototypeOf(value)\n    if (!proto || proto === Object.prototype) return true\n    return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE]\n}\n\nexport function original(value) {\n    if (value && value[DRAFT_STATE]) {\n        return value[DRAFT_STATE].base\n    }\n    // otherwise return undefined\n}\n\nexport const assign =\n    Object.assign ||\n    function assign(target, value) {\n        for (let key in value) {\n            if (has(value, key)) {\n                target[key] = value[key]\n            }\n        }\n        return target\n    }\n\nexport const ownKeys =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : typeof Object.getOwnPropertySymbols !== \"undefined\"\n        ? obj =>\n              Object.getOwnPropertyNames(obj).concat(\n                  Object.getOwnPropertySymbols(obj)\n              )\n        : Object.getOwnPropertyNames\n\nexport function shallowCopy(base, invokeGetters = false) {\n    if (Array.isArray(base)) return base.slice()\n    const clone = Object.create(Object.getPrototypeOf(base))\n    ownKeys(base).forEach(key => {\n        if (key === DRAFT_STATE) {\n            return // Never copy over draft state.\n        }\n        const desc = Object.getOwnPropertyDescriptor(base, key)\n        if (desc.get) {\n            if (!invokeGetters) {\n                throw new Error(\"Immer drafts cannot have computed properties\")\n            }\n            desc.value = desc.get.call(base)\n        }\n        if (desc.enumerable) {\n            clone[key] = desc.value\n        } else {\n            Object.defineProperty(clone, key, {\n                value: desc.value,\n                writable: true,\n                configurable: true\n            })\n        }\n    })\n    return clone\n}\n\nexport function each(value, cb) {\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) cb(i, value[i], value)\n    } else {\n        ownKeys(value).forEach(key => cb(key, value[key], value))\n    }\n}\n\nexport function isEnumerable(base, prop) {\n    return Object.getOwnPropertyDescriptor(base, prop).enumerable\n}\n\nexport function has(thing, prop) {\n    return Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n","import {DRAFT_STATE} from \"./common\"\n\n/** Each scope represents a `produce` call. */\nexport class ImmerScope {\n    constructor(parent) {\n        this.drafts = []\n        this.parent = parent\n\n        // Whenever the modified draft contains a draft from another scope, we\n        // need to prevent auto-freezing so the unowned draft can be finalized.\n        this.canAutoFreeze = true\n\n        // To avoid prototype lookups:\n        this.patches = null\n    }\n    usePatches(patchListener) {\n        if (patchListener) {\n            this.patches = []\n            this.inversePatches = []\n            this.patchListener = patchListener\n        }\n    }\n    revoke() {\n        this.leave()\n        this.drafts.forEach(revoke)\n        this.drafts = null // Make draft-related methods throw.\n    }\n    leave() {\n        if (this === ImmerScope.current) {\n            ImmerScope.current = this.parent\n        }\n    }\n}\n\nImmerScope.current = null\nImmerScope.enter = function() {\n    return (this.current = new ImmerScope(this.current))\n}\n\nfunction revoke(draft) {\n    draft[DRAFT_STATE].revoke()\n}\n","\"use strict\"\nimport {\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\nconst descriptors = {}\n\nexport function willFinalize(scope, result, isReplaced) {\n    scope.drafts.forEach(draft => {\n        draft[DRAFT_STATE].finalizing = true\n    })\n    if (!isReplaced) {\n        if (scope.patches) {\n            markChangesRecursively(scope.drafts[0])\n        }\n        // This is faster when we don't care about which attributes changed.\n        markChangesSweep(scope.drafts)\n    }\n    // When a child draft is returned, look for changes.\n    else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n        markChangesSweep(scope.drafts)\n    }\n}\n\nexport function createProxy(base, parent) {\n    const isArray = Array.isArray(base)\n    const draft = clonePotentialDraft(base)\n    each(draft, prop => {\n        proxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n    })\n\n    // See \"proxy.js\" for property documentation.\n    const scope = parent ? parent.scope : ImmerScope.current\n    const state = {\n        scope,\n        modified: false,\n        finalizing: false, // es5 only\n        finalized: false,\n        assigned: {},\n        parent,\n        base,\n        draft,\n        copy: null,\n        revoke,\n        revoked: false // es5 only\n    }\n\n    createHiddenProperty(draft, DRAFT_STATE, state)\n    scope.drafts.push(draft)\n    return draft\n}\n\nfunction revoke() {\n    this.revoked = true\n}\n\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    assertUnrevoked(state)\n    const value = source(state)[prop]\n    // Drafts are only created for proxyable values that exist in the base state.\n    if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n        prepareCopy(state)\n        return (state.copy[prop] = createProxy(value, state))\n    }\n    return value\n}\n\nfunction set(state, prop, value) {\n    assertUnrevoked(state)\n    state.assigned[prop] = true\n    if (!state.modified) {\n        if (is(source(state)[prop], value)) return\n        markChanged(state)\n        prepareCopy(state)\n    }\n    state.copy[prop] = value\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        if (state.parent) markChanged(state.parent)\n    }\n}\n\nfunction prepareCopy(state) {\n    if (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base) {\n    const state = base && base[DRAFT_STATE]\n    if (state) {\n        state.finalizing = true\n        const draft = shallowCopy(state.draft, true)\n        state.finalizing = false\n        return draft\n    }\n    return shallowCopy(base)\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n    let desc = descriptors[prop]\n    if (desc) {\n        desc.enumerable = enumerable\n    } else {\n        descriptors[prop] = desc = {\n            configurable: true,\n            enumerable,\n            get() {\n                return get(this[DRAFT_STATE], prop)\n            },\n            set(value) {\n                set(this[DRAFT_STATE], prop, value)\n            }\n        }\n    }\n    Object.defineProperty(draft, prop, desc)\n}\n\nfunction assertUnrevoked(state) {\n    if (state.revoked === true)\n        throw new Error(\n            \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n                JSON.stringify(source(state))\n        )\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(drafts) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (let i = drafts.length - 1; i >= 0; i--) {\n        const state = drafts[i][DRAFT_STATE]\n        if (!state.modified) {\n            if (Array.isArray(state.base)) {\n                if (hasArrayChanges(state)) markChanged(state)\n            } else if (hasObjectChanges(state)) markChanged(state)\n        }\n    }\n}\n\nfunction markChangesRecursively(object) {\n    if (!object || typeof object !== \"object\") return\n    const state = object[DRAFT_STATE]\n    if (!state) return\n    const {base, draft, assigned} = state\n    if (!Array.isArray(object)) {\n        // Look for added keys.\n        Object.keys(draft).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (base[key] === undefined && !has(base, key)) {\n                assigned[key] = true\n                markChanged(state)\n            } else if (!assigned[key]) {\n                // Only untouched properties trigger recursion.\n                markChangesRecursively(draft[key])\n            }\n        })\n        // Look for removed keys.\n        Object.keys(base).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (draft[key] === undefined && !has(draft, key)) {\n                assigned[key] = false\n                markChanged(state)\n            }\n        })\n    } else if (hasArrayChanges(state)) {\n        markChanged(state)\n        assigned.length = true\n        if (draft.length < base.length) {\n            for (let i = draft.length; i < base.length; i++) assigned[i] = false\n        } else {\n            for (let i = base.length; i < draft.length; i++) assigned[i] = true\n        }\n        for (let i = 0; i < draft.length; i++) {\n            // Only untouched indices trigger recursion.\n            if (assigned[i] === undefined) markChangesRecursively(draft[i])\n        }\n    }\n}\n\nfunction hasObjectChanges(state) {\n    const {base, draft} = state\n\n    // Search for added keys. Start at the back, because non-numeric keys\n    // are ordered by time of definition on the object.\n    const keys = Object.keys(draft)\n    for (let i = keys.length - 1; i >= 0; i--) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (base[keys[i]] === undefined && !has(base, keys[i])) {\n            return true\n        }\n    }\n\n    // Since no keys have been added, we can compare lengths to know if an\n    // object has been deleted.\n    return keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state) {\n    const {draft} = state\n    if (draft.length !== state.base.length) return true\n    // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    const descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n    // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n    if (descriptor && !descriptor.get) return true\n    // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n    return false\n}\n\nfunction createHiddenProperty(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value: value,\n        enumerable: false,\n        writable: true\n    })\n}\n","\"use strict\"\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraftable,\n    isDraft,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// Do nothing before being finalized.\nexport function willFinalize() {}\n\nexport function createProxy(base, parent) {\n    const scope = parent ? parent.scope : ImmerScope.current\n    const state = {\n        // Track which produce call this is associated with.\n        scope,\n        // True for both shallow and deep changes.\n        modified: false,\n        // Used during finalization.\n        finalized: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned: {},\n        // The parent draft state.\n        parent,\n        // The base state.\n        base,\n        // The base proxy.\n        draft: null,\n        // Any property proxies.\n        drafts: {},\n        // The base copy with any updated values.\n        copy: null,\n        // Called by the `produce` function.\n        revoke: null\n    }\n\n    const {revoke, proxy} = Array.isArray(base)\n        ? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n          // although state itself is an object\n          Proxy.revocable([state], arrayTraps)\n        : Proxy.revocable(state, objectTraps)\n\n    state.draft = proxy\n    state.revoke = revoke\n\n    scope.drafts.push(proxy)\n    return proxy\n}\n\nconst objectTraps = {\n    get,\n    has(target, prop) {\n        return prop in source(target)\n    },\n    ownKeys(target) {\n        return Reflect.ownKeys(source(target))\n    },\n    set,\n    deleteProperty,\n    getOwnPropertyDescriptor,\n    defineProperty() {\n        throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n    },\n    getPrototypeOf(target) {\n        return Object.getPrototypeOf(target.base)\n    },\n    setPrototypeOf() {\n        throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n    }\n}\n\nconst arrayTraps = {}\neach(objectTraps, (key, fn) => {\n    arrayTraps[key] = function() {\n        arguments[0] = arguments[0][0]\n        return fn.apply(this, arguments)\n    }\n})\narrayTraps.deleteProperty = function(state, prop) {\n    if (isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n    }\n    return objectTraps.deleteProperty.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n    }\n    return objectTraps.set.call(this, state[0], prop, value)\n}\n\n// returns the object we should be reading the current value from, which is base, until some change has been made\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    if (prop === DRAFT_STATE) return state\n    let {drafts} = state\n\n    // Check for existing draft in unmodified state.\n    if (!state.modified && has(drafts, prop)) {\n        return drafts[prop]\n    }\n\n    const value = source(state)[prop]\n    if (state.finalized || !isDraftable(value)) return value\n\n    // Check for existing draft in modified state.\n    if (state.modified) {\n        // Assigned values are never drafted. This catches any drafts we created, too.\n        if (value !== state.base[prop]) return value\n        // Store drafts on the copy (when one exists).\n        drafts = state.copy\n    }\n\n    return (drafts[prop] = createProxy(value, state))\n}\n\nfunction set(state, prop, value) {\n    if (!state.modified) {\n        // Optimize based on value's truthiness. Truthy values are guaranteed to\n        // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n        // values may be drafts, but falsy values are never drafts.\n        const isUnchanged = value\n            ? is(state.base[prop], value) || value === state.drafts[prop]\n            : is(state.base[prop], value) && prop in state.base\n        if (isUnchanged) return true\n        markChanged(state)\n    }\n    state.assigned[prop] = true\n    state.copy[prop] = value\n    return true\n}\n\nfunction deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (state.base[prop] !== undefined || prop in state.base) {\n        state.assigned[prop] = false\n        markChanged(state)\n    }\n    if (state.copy) delete state.copy[prop]\n    return true\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n    const owner = source(state)\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n    if (desc) {\n        desc.writable = true\n        desc.configurable = !Array.isArray(owner) || prop !== \"length\"\n    }\n    return desc\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        state.copy = assign(shallowCopy(state.base), state.drafts)\n        state.drafts = null\n        if (state.parent) markChanged(state.parent)\n    }\n}\n","import {each} from \"./common\"\n\nexport function generatePatches(state, basePath, patches, inversePatches) {\n    Array.isArray(state.base)\n        ? generateArrayPatches(state, basePath, patches, inversePatches)\n        : generateObjectPatches(state, basePath, patches, inversePatches)\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n    const {base, copy, assigned} = state\n    const minLength = Math.min(base.length, copy.length)\n\n    // Look for replaced indices.\n    for (let i = 0; i < minLength; i++) {\n        if (assigned[i] && base[i] !== copy[i]) {\n            const path = basePath.concat(i)\n            patches.push({op: \"replace\", path, value: copy[i]})\n            inversePatches.push({op: \"replace\", path, value: base[i]})\n        }\n    }\n\n    // Did the array expand?\n    if (minLength < copy.length) {\n        for (let i = minLength; i < copy.length; i++) {\n            patches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: copy[i]\n            })\n        }\n        inversePatches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: base.length\n        })\n    }\n\n    // ...or did it shrink?\n    else if (minLength < base.length) {\n        patches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: copy.length\n        })\n        for (let i = minLength; i < base.length; i++) {\n            inversePatches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: base[i]\n            })\n        }\n    }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n    const {base, copy} = state\n    each(state.assigned, (key, assignedValue) => {\n        const origValue = base[key]\n        const value = copy[key]\n        const op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\"\n        if (origValue === value && op === \"replace\") return\n        const path = basePath.concat(key)\n        patches.push(op === \"remove\" ? {op, path} : {op, path, value})\n        inversePatches.push(\n            op === \"add\"\n                ? {op: \"remove\", path}\n                : op === \"remove\"\n                ? {op: \"add\", path, value: origValue}\n                : {op: \"replace\", path, value: origValue}\n        )\n    })\n}\n\nexport function applyPatches(draft, patches) {\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n        const {path} = patch\n        if (path.length === 0 && patch.op === \"replace\") {\n            draft = patch.value\n        } else {\n            let base = draft\n            for (let i = 0; i < path.length - 1; i++) {\n                base = base[path[i]]\n                if (!base || typeof base !== \"object\")\n                    throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n            }\n            const key = path[path.length - 1]\n            switch (patch.op) {\n                case \"replace\":\n                case \"add\":\n                    // TODO: add support is not extensive, it does not support insertion or `-` atm!\n                    base[key] = patch.value\n                    break\n                case \"remove\":\n                    if (Array.isArray(base)) {\n                        if (key !== base.length - 1)\n                            throw new Error(`Only the last index of an array can be removed, index: ${key}, length: ${base.length}`) // prettier-ignore\n                        base.length -= 1\n                    } else {\n                        delete base[key]\n                    }\n                    break\n                default:\n                    throw new Error(\"Unsupported patch operation: \" + patch.op)\n            }\n        }\n    }\n    return draft\n}\n","import * as legacyProxy from \"./es5\"\nimport * as modernProxy from \"./proxy\"\nimport {applyPatches, generatePatches} from \"./patches\"\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE,\n    NOTHING\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\nfunction verifyMinified() {}\n\nconst configDefaults = {\n    useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n    autoFreeze:\n        typeof process !== \"undefined\"\n            ? process.env.NODE_ENV !== \"production\"\n            : verifyMinified.name === \"verifyMinified\",\n    onAssign: null,\n    onDelete: null,\n    onCopy: null\n}\n\nexport class Immer {\n    constructor(config) {\n        assign(this, configDefaults, config)\n        this.setUseProxies(this.useProxies)\n        this.produce = this.produce.bind(this)\n    }\n    produce(base, recipe, patchListener) {\n        // curried invocation\n        if (typeof base === \"function\" && typeof recipe !== \"function\") {\n            const defaultBase = recipe\n            recipe = base\n\n            // prettier-ignore\n            return (base = defaultBase, ...args) =>\n                this.produce(base, draft => recipe.call(draft, draft, ...args))\n        }\n\n        // prettier-ignore\n        {\n            if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\")\n            if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\")\n        }\n\n        let result\n\n        // Only plain objects, arrays, and \"immerable classes\" are drafted.\n        if (isDraftable(base)) {\n            const scope = ImmerScope.enter()\n            const proxy = this.createProxy(base)\n            let hasError = true\n            try {\n                result = recipe.call(proxy, proxy)\n                hasError = false\n            } finally {\n                // finally instead of catch + rethrow better preserves original stack\n                if (hasError) scope.revoke()\n                else scope.leave()\n            }\n            if (result instanceof Promise) {\n                return result.then(\n                    result => {\n                        scope.usePatches(patchListener)\n                        return this.processResult(result, scope)\n                    },\n                    error => {\n                        scope.revoke()\n                        throw error\n                    }\n                )\n            }\n            scope.usePatches(patchListener)\n            return this.processResult(result, scope)\n        } else {\n            result = recipe(base)\n            if (result === undefined) return base\n            return result !== NOTHING ? result : undefined\n        }\n    }\n    createDraft(base) {\n        if (!isDraftable(base)) throw new Error(\"First argument to createDraft should be a plain object, an array, or an immerable object.\") // prettier-ignore\n        const scope = ImmerScope.enter()\n        const proxy = this.createProxy(base)\n        scope.leave()\n        proxy[DRAFT_STATE].customDraft = true\n        return proxy\n    }\n    finishDraft(draft, patchListener) {\n        if (!isDraft(draft)) throw new Error(\"First argument to finishDraft should be an object from createDraft.\") // prettier-ignore\n        const state = draft[DRAFT_STATE]\n        if (!state.customDraft) throw new Error(\"The draft provided was not created using `createDraft`\") // prettier-ignore\n        if (state.finalized) throw new Error(\"The draft provided was has already been finished\") // prettier-ignore\n        // TODO: check if created with createDraft\n        // TODO: check if not finsihed twice\n        const {scope} = state\n        scope.usePatches(patchListener)\n        return this.processResult(undefined, scope)\n    }\n    setAutoFreeze(value) {\n        this.autoFreeze = value\n    }\n    setUseProxies(value) {\n        this.useProxies = value\n        assign(this, value ? modernProxy : legacyProxy)\n    }\n    applyPatches(base, patches) {\n        // Mutate the base state when a draft is passed.\n        if (isDraft(base)) {\n            return applyPatches(base, patches)\n        }\n        // Otherwise, produce a copy of the base state.\n        return this.produce(base, draft => applyPatches(draft, patches))\n    }\n    /** @internal */\n    processResult(result, scope) {\n        const baseDraft = scope.drafts[0]\n        const isReplaced = result !== undefined && result !== baseDraft\n        this.willFinalize(scope, result, isReplaced)\n        if (isReplaced) {\n            if (baseDraft[DRAFT_STATE].modified) {\n                scope.revoke()\n                throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n            }\n            if (isDraftable(result)) {\n                // Finalize the result in case it contains (or is) a subset of the draft.\n                result = this.finalize(result, null, scope)\n            }\n            if (scope.patches) {\n                scope.patches.push({\n                    op: \"replace\",\n                    path: [],\n                    value: result\n                })\n                scope.inversePatches.push({\n                    op: \"replace\",\n                    path: [],\n                    value: baseDraft[DRAFT_STATE].base\n                })\n            }\n        } else {\n            // Finalize the base draft.\n            result = this.finalize(baseDraft, [], scope)\n        }\n        scope.revoke()\n        if (scope.patches) {\n            scope.patchListener(scope.patches, scope.inversePatches)\n        }\n        return result !== NOTHING ? result : undefined\n    }\n    /**\n     * @internal\n     * Finalize a draft, returning either the unmodified base state or a modified\n     * copy of the base state.\n     */\n    finalize(draft, path, scope) {\n        const state = draft[DRAFT_STATE]\n        if (!state) {\n            if (Object.isFrozen(draft)) return draft\n            return this.finalizeTree(draft, null, scope)\n        }\n        // Never finalize drafts owned by another scope.\n        if (state.scope !== scope) {\n            return draft\n        }\n        if (!state.modified) {\n            return state.base\n        }\n        if (!state.finalized) {\n            state.finalized = true\n            this.finalizeTree(state.draft, path, scope)\n\n            if (this.onDelete) {\n                // The `assigned` object is unreliable with ES5 drafts.\n                if (this.useProxies) {\n                    const {assigned} = state\n                    for (const prop in assigned) {\n                        if (!assigned[prop]) this.onDelete(state, prop)\n                    }\n                } else {\n                    const {base, copy} = state\n                    each(base, prop => {\n                        if (!has(copy, prop)) this.onDelete(state, prop)\n                    })\n                }\n            }\n            if (this.onCopy) {\n                this.onCopy(state)\n            }\n\n            // At this point, all descendants of `state.copy` have been finalized,\n            // so we can be sure that `scope.canAutoFreeze` is accurate.\n            if (this.autoFreeze && scope.canAutoFreeze) {\n                Object.freeze(state.copy)\n            }\n\n            if (path && scope.patches) {\n                generatePatches(\n                    state,\n                    path,\n                    scope.patches,\n                    scope.inversePatches\n                )\n            }\n        }\n        return state.copy\n    }\n    /**\n     * @internal\n     * Finalize all drafts in the given state tree.\n     */\n    finalizeTree(root, rootPath, scope) {\n        const state = root[DRAFT_STATE]\n        if (state) {\n            if (!this.useProxies) {\n                state.finalizing = true\n                state.copy = shallowCopy(state.draft, true)\n                state.finalizing = false\n            }\n            root = state.copy\n        }\n\n        const needPatches = !!rootPath && !!scope.patches\n        const finalizeProperty = (prop, value, parent) => {\n            if (value === parent) {\n                throw Error(\"Immer forbids circular references\")\n            }\n\n            // In the `finalizeTree` method, only the `root` object may be a draft.\n            const isDraftProp = !!state && parent === root\n\n            if (isDraft(value)) {\n                const path =\n                    isDraftProp && needPatches && !state.assigned[prop]\n                        ? rootPath.concat(prop)\n                        : null\n\n                // Drafts owned by `scope` are finalized here.\n                value = this.finalize(value, path, scope)\n\n                // Drafts from another scope must prevent auto-freezing.\n                if (isDraft(value)) {\n                    scope.canAutoFreeze = false\n                }\n\n                // Preserve non-enumerable properties.\n                if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n                    parent[prop] = value\n                } else {\n                    Object.defineProperty(parent, prop, {value})\n                }\n\n                // Unchanged drafts are never passed to the `onAssign` hook.\n                if (isDraftProp && value === state.base[prop]) return\n            }\n            // Unchanged draft properties are ignored.\n            else if (isDraftProp && is(value, state.base[prop])) {\n                return\n            }\n            // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n            else if (isDraftable(value) && !Object.isFrozen(value)) {\n                each(value, finalizeProperty)\n            }\n\n            if (isDraftProp && this.onAssign) {\n                this.onAssign(state, prop, value)\n            }\n        }\n\n        each(root, finalizeProperty)\n        return root\n    }\n}\n","import {Immer} from \"./immer\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce = immer.produce\nexport default produce\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\nexport {\n    original,\n    isDraft,\n    isDraftable,\n    NOTHING as nothing,\n    DRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n"],"names":["NOTHING","Symbol","DRAFTABLE","DRAFT_STATE","isDraft","value","isDraftable","Array","isArray","proto","Object","getPrototypeOf","prototype","constructor","assign","target","key","has","ownKeys","Reflect","getOwnPropertySymbols","getOwnPropertyNames","obj","concat","shallowCopy","base","invokeGetters","slice","clone","create","forEach","desc","getOwnPropertyDescriptor","get","Error","call","enumerable","defineProperty","each","cb","i","length","isEnumerable","prop","thing","hasOwnProperty","is","x","y","ImmerScope","parent","drafts","canAutoFreeze","patches","patchListener","inversePatches","leave","revoke","this","current","draft","enter","descriptors","createProxy","clonePotentialDraft","state","source","finalizing","copy","assigned","modified","scope","push","revoked","markChanged","prepareCopy","assertUnrevoked","JSON","stringify","markChangesSweep","hasArrayChanges","hasObjectChanges","keys","undefined","descriptor","result","isReplaced","markChangesRecursively","object","revocable","arrayTraps","Proxy","objectTraps","proxy","finalized","isUnchanged","owner","writable","configurable","fn","arguments","apply","deleteProperty","isNaN","parseInt","set","generatePatches","basePath","minLength","Math","min","path","op","generateArrayPatches","assignedValue","origValue","generateObjectPatches","applyPatches","patch","join","configDefaults","process","env","NODE_ENV","name","Immer","config","setUseProxies","useProxies","produce","bind","recipe","defaultBase","args","_this","hasError","Promise","then","usePatches","processResult","error","customDraft","autoFreeze","modernProxy","legacyProxy","baseDraft","willFinalize","finalize","isFrozen","finalizeTree","onDelete","_this2","onCopy","freeze","root","rootPath","needPatches","finalizeProperty","isDraftProp","_this3","onAssign","immer","setAutoFreeze","createDraft","finishDraft"],"mappings":"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"}